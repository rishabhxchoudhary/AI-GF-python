#!/usr/bin/env node

const fs = require("fs");
const path = require("path");
const crypto = require("crypto");
const readline = require("readline");

// Colors for console output
const colors = {
  red: "\x1b[31m",
  green: "\x1b[32m",
  yellow: "\x1b[33m",
  blue: "\x1b[34m",
  magenta: "\x1b[35m",
  cyan: "\x1b[36m",
  white: "\x1b[37m",
  reset: "\x1b[0m",
  bright: "\x1b[1m",
};

const log = {
  info: (msg) => console.log(`${colors.blue}â„¹${colors.reset} ${msg}`),
  success: (msg) => console.log(`${colors.green}âœ“${colors.reset} ${msg}`),
  warning: (msg) => console.log(`${colors.yellow}âš ${colors.reset} ${msg}`),
  error: (msg) => console.log(`${colors.red}âœ—${colors.reset} ${msg}`),
  title: (msg) =>
    console.log(`\n${colors.bright}${colors.cyan}${msg}${colors.reset}`),
  step: (msg) => console.log(`\n${colors.magenta}â†’${colors.reset} ${msg}`),
};

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

function generateSecureKey(length = 32) {
  return crypto.randomBytes(length).toString("base64");
}

function question(query) {
  return new Promise((resolve) => {
    rl.question(query, resolve);
  });
}

async function checkExistingEnv() {
  const envPath = path.join(process.cwd(), ".env");
  if (fs.existsSync(envPath)) {
    log.warning("Found existing .env file");
    const overwrite = await question("Do you want to overwrite it? (y/N): ");
    if (overwrite.toLowerCase() !== "y") {
      log.info("Setup cancelled. You can manually edit your .env file.");
      process.exit(0);
    }
  }
  return envPath;
}

async function getApiKeys() {
  const keys = {};

  log.step("AI Provider Configuration");
  log.info(
    "Hugging Face is the primary AI provider (matches your Python setup).",
  );

  const hfKey = await question("Enter your Hugging Face API key (hf_...): ");
  if (hfKey.trim()) {
    keys.HUGGINGFACE_API_KEY = hfKey.trim();
    log.success("Hugging Face key configured");
  } else {
    log.error("Hugging Face API key is required!");
    log.info(
      "You can get a Hugging Face token at: https://huggingface.co/settings/tokens",
    );
    process.exit(1);
  }

  const openaiKey = await question(
    "Enter your OpenAI API key (sk-...) [optional fallback]: ",
  );
  if (openaiKey.trim()) {
    keys.OPENAI_API_KEY = openaiKey.trim();
    log.success("OpenAI key configured as fallback");
  }

  return keys;
}

async function getStripeConfig() {
  log.step("Payment Configuration (Stripe)");
  log.info("Required for credit-based monetization system");

  const stripeSecret = await question(
    "Enter your Stripe Secret Key (sk_test_... or sk_live_...): ",
  );
  const stripePublic = await question(
    "Enter your Stripe Publishable Key (pk_test_... or pk_live_...): ",
  );

  if (!stripeSecret.trim() || !stripePublic.trim()) {
    log.warning("Stripe not configured - payment features will be disabled");
    log.info("Get Stripe keys at: https://dashboard.stripe.com/apikeys");
    return {};
  }

  return {
    STRIPE_SECRET_KEY: stripeSecret.trim(),
    NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: stripePublic.trim(),
  };
}

async function getDatabaseConfig() {
  log.step("Database Configuration");

  const useLocal = await question("Use local SQLite database? (Y/n): ");
  if (useLocal.toLowerCase() !== "n") {
    return {
      DATABASE_URL: "file:./db.sqlite",
    };
  }

  const dbUrl = await question("Enter your database URL: ");
  return {
    DATABASE_URL: dbUrl.trim(),
  };
}

function generateEnvContent(config) {
  const nextAuthSecret = generateSecureKey();

  return `# Generated by setup-env.js on ${new Date().toISOString()}
# AI Girlfriend App Environment Configuration

# Database Configuration
DATABASE_URL="${config.DATABASE_URL || "file:./db.sqlite"}"

# NextAuth.js Configuration
NEXTAUTH_SECRET="${nextAuthSecret}"
NEXTAUTH_URL="http://localhost:3000"

# AI Providers (Hugging Face is primary)
${config.HUGGINGFACE_API_KEY ? `HUGGINGFACE_API_KEY="${config.HUGGINGFACE_API_KEY}"` : '# HUGGINGFACE_API_KEY="hf_your-token-here"'}
${config.OPENAI_API_KEY ? `OPENAI_API_KEY="${config.OPENAI_API_KEY}"` : '# OPENAI_API_KEY="sk-your-key-here"'}

# Stripe Configuration
${config.STRIPE_SECRET_KEY ? `STRIPE_SECRET_KEY="${config.STRIPE_SECRET_KEY}"` : '# STRIPE_SECRET_KEY="sk_test_your-key-here"'}
${config.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY ? `NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY="${config.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY}"` : '# NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY="pk_test_your-key-here"'}

# Stripe Price IDs (Create these in your Stripe Dashboard)
# STRIPE_STARTER_PRICE_ID="price_starter_id"
# STRIPE_POPULAR_PRICE_ID="price_popular_id"
# STRIPE_PREMIUM_PRICE_ID="price_premium_id"
# STRIPE_ULTIMATE_PRICE_ID="price_ultimate_id"

# Application Configuration
APP_URL="http://localhost:3000"
APP_NAME="AI Girlfriend"
NEXT_PUBLIC_APP_URL="http://localhost:3000"
NEXT_PUBLIC_APP_NAME="AI Girlfriend"

# Feature Flags
ENABLE_FREE_TRIAL="true"
FREE_TRIAL_CREDITS="5"
ENABLE_REFERRAL_SYSTEM="false"
ENABLE_PREMIUM_FEATURES="true"

# Content Safety
OPENAI_MODERATION_ENABLED="true"
CONTENT_SAFETY_STRICT_MODE="false"

# OAuth Providers (Optional - uncomment and configure for social login)
# GOOGLE_CLIENT_ID="your-google-client-id"
# GOOGLE_CLIENT_SECRET="your-google-client-secret"
# GITHUB_ID="your-github-client-id"
# GITHUB_SECRET="your-github-client-secret"

# Rate Limiting (Optional - requires Upstash Redis)
# UPSTASH_REDIS_REST_URL="https://your-redis-url.upstash.io"
# UPSTASH_REDIS_REST_TOKEN="your-upstash-redis-token"

# Analytics (Optional)
# GOOGLE_ANALYTICS_ID="GA-XXXXXXXXX"
# POSTHOG_KEY="phc_your-posthog-key"
# NEXT_PUBLIC_GOOGLE_ANALYTICS_ID="GA-XXXXXXXXX"
# NEXT_PUBLIC_POSTHOG_KEY="phc_your-posthog-key"
# NEXT_PUBLIC_ENABLE_ANALYTICS="false"

# Email Configuration (Optional)
# SMTP_HOST="smtp.gmail.com"
# SMTP_PORT="587"
# SMTP_USER="your-email@gmail.com"
# SMTP_PASS="your-app-password"
# SMTP_FROM="noreply@yourapp.com"

# AWS Configuration (Optional)
# AWS_ACCESS_KEY_ID="your-aws-access-key"
# AWS_SECRET_ACCESS_KEY="your-aws-secret-key"
# AWS_REGION="us-east-1"
# AWS_S3_BUCKET="your-s3-bucket-name"

# Error Tracking (Optional)
# SENTRY_DSN="https://your-sentry-dsn@sentry.io/project-id"
# NEXT_PUBLIC_SENTRY_DSN="https://your-sentry-dsn@sentry.io/project-id"

# Admin Configuration
# ADMIN_EMAILS="your-admin@example.com"

# Development Settings
NODE_ENV="development"
`;
}

async function main() {
  log.title("ðŸš€ AI Girlfriend App - Environment Setup");
  log.info("This script will help you configure your environment variables");

  try {
    // Check existing .env
    const envPath = await checkExistingEnv();

    // Get configuration
    const config = {};

    // Get API keys
    Object.assign(config, await getApiKeys());

    // Get Stripe config
    Object.assign(config, await getStripeConfig());

    // Get database config
    Object.assign(config, await getDatabaseConfig());

    // Generate and write .env file
    const envContent = generateEnvContent(config);
    fs.writeFileSync(envPath, envContent);

    log.success("Environment file created successfully!");
    log.title("ðŸŽ‰ Setup Complete!");

    log.info("Next steps:");
    console.log("  1. Review and edit .env file if needed");
    console.log("  2. Run: npm run db:push (to setup database)");
    console.log("  3. Run: npm run dev (to start development server)");

    if (config.STRIPE_SECRET_KEY) {
      log.info("\nStripe Setup Required:");
      console.log("  1. Create products and prices in your Stripe Dashboard");
      console.log("  2. Update the STRIPE_*_PRICE_ID values in .env");
      console.log("  3. Set up webhook endpoint for payment processing");
    }

    log.info("\nFor production deployment:");
    console.log("  1. Update APP_URL and NEXT_PUBLIC_APP_URL");
    console.log("  2. Generate new NEXTAUTH_SECRET");
    console.log("  3. Configure OAuth providers if needed");
    console.log("  4. Set up proper database (PostgreSQL recommended)");
  } catch (error) {
    log.error(`Setup failed: ${error.message}`);
    process.exit(1);
  } finally {
    rl.close();
  }
}

// Handle Ctrl+C gracefully
process.on("SIGINT", () => {
  log.warning("\nSetup cancelled by user");
  rl.close();
  process.exit(0);
});

if (require.main === module) {
  main().catch((error) => {
    log.error(`Unexpected error: ${error.message}`);
    process.exit(1);
  });
}
