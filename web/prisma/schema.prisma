// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  credits       Int       @default(5) // Free trial: 5 credits
  totalSpent    Float     @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // AI Girlfriend specific fields
  personalityTraits String? // JSON stored as string
  relationshipStage String @default("new")
  relationshipData  String? // JSON stored as string
  memories          String? // JSON stored as string
  userPreferences   String? // JSON stored as string
  insideJokes       String? // JSON stored as string
  emotionalMoments  String? // JSON stored as string

  // Tracking
  totalInteractions Int @default(0)
  lastInteraction   DateTime?

  accounts      Account[]
  sessions      Session[]
  conversations Conversation[]
  purchases     Purchase[]
  creditUsages  CreditUsage[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Conversation {
  id        String   @id @default(cuid())
  userId    String
  messages  String   // Array of message objects as JSON string
  metadata  String?  // Additional conversation metadata as JSON string
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

model Purchase {
  id            String   @id @default(cuid())
  userId        String
  stripeSessionId String @unique
  status        String   // pending, completed, failed, cancelled
  credits       Int
  amount        Float    // Amount in USD
  currency      String   @default("usd")
  packageType   String   // starter, popular, premium, ultimate
  createdAt     DateTime @default(now())
  completedAt   DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

model CreditUsage {
  id          String   @id @default(cuid())
  userId      String
  credits     Int      // Amount deducted (positive number)
  reason      String   // chat_message, personality_update, etc.
  metadata    String?  // Additional context as JSON string
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

// Analytics and tracking
model UserActivity {
  id        String   @id @default(cuid())
  userId    String
  action    String   // login, chat, purchase, etc.
  metadata  String? // JSON stored as string
  timestamp DateTime @default(now())

  @@index([userId, timestamp])
  @@index([action, timestamp])
}
